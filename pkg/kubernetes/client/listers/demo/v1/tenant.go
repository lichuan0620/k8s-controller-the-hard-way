/*
k8s-controller-the-hard-way, a guide to really, really understand how to program k8s controllers
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/lichuan0620/k8s-controller-the-hard-way/pkg/kubernetes/apis/demo/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TenantLister helps list Tenants.
// All objects returned here must be treated as read-only.
type TenantLister interface {
	// List lists all Tenants in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Tenant, err error)
	// Get retrieves the Tenant from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Tenant, error)
	TenantListerExpansion
}

// tenantLister implements the TenantLister interface.
type tenantLister struct {
	indexer cache.Indexer
}

// NewTenantLister returns a new TenantLister.
func NewTenantLister(indexer cache.Indexer) TenantLister {
	return &tenantLister{indexer: indexer}
}

// List lists all Tenants in the indexer.
func (s *tenantLister) List(selector labels.Selector) (ret []*v1.Tenant, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Tenant))
	})
	return ret, err
}

// Get retrieves the Tenant from the index for a given name.
func (s *tenantLister) Get(name string) (*v1.Tenant, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("tenant"), name)
	}
	return obj.(*v1.Tenant), nil
}
